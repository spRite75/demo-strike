generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ERD.md"
  theme    = "dark"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model LocalUser {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

enum DiskFileKind {
  DEMO
  DEMO_INFO
  UNKNOWN
}

model DiskFile {
  id          Int          @id @default(autoincrement())
  filepath    String       @unique
  fileCreated DateTime
  fileUpdated DateTime
  isProcessed Boolean      @default(false)
  isDeleted   Boolean      @default(false)
  kind        DiskFileKind @default(UNKNOWN)
  Demo        Demo?
  DemoInfo    DemoInfo?
}

enum DemoKind {
  UNKNOWN
  OFFICIAL_MATCHMAKING
}

model Demo {
  id         String   @id
  kind       DemoKind @default(UNKNOWN)
  mapName    String
  serverName String
  clientName String

  SourceDiskFile   DiskFile   @relation(fields: [sourceDiskFileId], references: [id])
  sourceDiskFileId Int        @unique
  DemoTeam         DemoTeam[]
  DemoInfo         DemoInfo?  @relation(fields: [demoInfoId], references: [id])
  demoInfoId       String?    @unique
}

enum DemoTeamSide {
  UNKNOWN
  TERRORISTS
  COUNTER_TERRORISTS
}

model DemoTeam {
  side            DemoTeamSide
  scoreFirstHalf  Int
  scoreSecondHalf Int
  scoreTotal      Int

  Demo           Demo             @relation(fields: [demoId], references: [id])
  demoId         String
  DemoTeamPlayer DemoTeamPlayer[]

  @@id([side, demoId])
}

model DemoTeamPlayer {
  steam64Id          String
  displayName        String   @default("player")
  kills              Int
  assists            Int
  deaths             Int
  headshotPercentage Decimal? @db.Decimal(5, 2)

  DemoTeam       DemoTeam     @relation(fields: [demoTeamSide, demoTeamDemoId], references: [side, demoId])
  demoTeamSide   DemoTeamSide
  demoTeamDemoId String
  Player         Player?      @relation(fields: [steam64Id], references: [steam64Id])

  @@id([steam64Id, demoTeamSide, demoTeamDemoId])
}

model DemoInfo {
  id             String   @id
  matchTimestamp DateTime
  steam64Ids     String[]

  SourceDiskFile   DiskFile @relation(fields: [sourceDiskFileId], references: [id])
  sourceDiskFileId Int      @unique
  Demo             Demo?
}

model Player {
  id                    Int     @id @default(autoincrement())
  steam64Id             String  @unique
  displayName           String
  steamProfileUrl       String?
  steamAvatarUrlDefault String?
  steamAvatarUrlMedium  String?
  steamAvatarUrlFull    String?

  DemoTeamPlayer DemoTeamPlayer[]
}
